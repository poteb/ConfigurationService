@using Newtonsoft.Json
@using pote.Config.Admin.WebClient.Misc
@using pote.Config.Admin.WebClient.Model
@using pote.Config.Admin.WebClient.Services
@using pote.Config.Shared

<MudExpansionPanels Style="padding-top:5px">
    <MudExpansionPanel @ref="_expansionPanel">
        <TitleContent>
            <MudGrid>
                <MudItem xs="1">
                    <MudText>
                        <h3>Tests</h3>
                    </MudText>
                </MudItem>
                <MudItem xs="11">
                    <MudButton StartIcon="@Icons.Material.Filled.Check" Variant="Variant.Outlined" Color="Color.Info" OnClick="RunTests" Disabled="@_runningTests">Run tests</MudButton>
                </MudItem>
            </MudGrid>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12">
                    @if (_runningTests)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
                    }
                    else
                    {
                        <div style="height:4px"></div>
                    }
                </MudItem>
                <MudItem xs="12" Style="padding-left: 30px">
                    @* <MudItem xs="12" Style="border-left: 10px solid #FFA726; padding-left: 30px"> *@
                    @foreach (var result in _testResults)
                    {
                        var json = result.GetJson();
                        var lines = json.Split('\n').Length;
                        var jsonLines = lines < 3 ? 3 : lines > 10 ? 10 : lines;
                        <MudItem xs="12" Style="margin-bottom:20px">
                            <MudGrid Style="padding: 0;margin:0">
                                <MudItem xs="12" Style="padding: 0">
                                    Application: <b>@AllApplications.FirstOrDefault(x => x.Id == result.Application)?.Name</b>
                                </MudItem>
                                <MudItem xs="12" Style="padding: 0">
                                    Environment: <b>@AllEnvironments.FirstOrDefault(x => x.Id == result.Environment)?.Name</b>
                                </MudItem>
                                <MudItem xs="12" Style="padding: 0">
                                    @if (result.Problems.Any())
                                    {
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ThumbDown" Color="Color.Error"/>
                                        @foreach (var problem in result.Problems)
                                        {
                                            <MudItem Style="color: red">• @problem</MudItem>
                                        }
                                    }
                                    else
                                    {
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ThumbUp" Color="Color.Success"/>
                                    }
                                </MudItem>
                                <MudItem xs="12" Style="padding: 0">
                                    <MudTextField ReadOnly="true" T="string" Text="@FormatJsonHelper.FormatJson(json)" Variant="Variant.Outlined" Lines="@jsonLines" Style="width: calc(100% - 25px)"></MudTextField>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    }
                </MudItem>
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private bool _runningTests;
    private List<ParseResponse> _testResults = new();
    private MudExpansionPanel _expansionPanel = null!;

    [Parameter] public Configuration Configuration { get; set; } = null!;
    [Parameter] public List<Application> AllApplications { get; set; } = null!;
    [Parameter] public List<ConfigEnvironment> AllEnvironments { get; set; } = null!;
    [Inject] public IApiService ApiService { get; set; } = null!;
    [Inject] public IConfigurationTestService ConfigurationTestService { get; set; } = null!;

    public async Task RunTests()
    {
        if (!_expansionPanel.IsExpanded)
            _expansionPanel.Expand();
        _runningTests = true;
        try
        {
            var tempResults = await ConfigurationTestService.RunTest(Configuration);
            _testResults.Clear();
            _testResults = tempResults;
        }
        catch (Exception)
        {
            _testResults.Clear();
            throw;
        }
        finally
        {
            _runningTests = false;
        }
    }
}