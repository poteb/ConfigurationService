@using pote.Config.Admin.WebClient.Model
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json
@using pote.Config.Admin.WebClient.Mappers
@using pote.Config.Admin.WebClient.Services
@using pote.Config.Shared
<MudExpansionPanel Style="@($"background-color:{(Index % 2 == 0 ? Colors.Indigo.Lighten5 : Colors.Teal.Lighten5)}")" Disabled="@_configuration.Deleted" @ref="_expansionPanel">
    <TitleContent>
        <MudGrid Style="padding: 0; margin: 0; width: 99%">
            <MudItem xs="10" Style="padding-bottom: 0">
                <MudGrid Style="padding: 0; margin: 0; width: 99%">
                    <MudItem xs="12" Class="d-flex" Style="padding-bottom: 0">
                        <MudText Style="min-width: 110px;">Environments:</MudText>
                        <MudText Style="font-weight: bold">@_environmentsText</MudText>
                        @*<MudIconButton Icon="@Icons.Filled.Add" OnClick="ToggleEnvironmentsPopup" Size="Size.Small" ></MudIconButton>
                    <MudPopover Open="@_environmentPopupOpen" Fixed="true" Class="px-4 pt-4">
                    <MudSelect T="ConfigEnvironment" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Environments" MultiSelection="true" @bind-SelectedValues="SelectedEnvironments" SelectAll="true">
                    @foreach (var environment in AllEnvironments)
                    {
                    <MudSelectItem T="ConfigEnvironment" Value="environment" Style="white-space: nowrap !important">@environment.Name</MudSelectItem>
                    }
                    </MudSelect>
                    </MudPopover>*@
                    </MudItem>
                    <MudItem xs="12" Class="d-flex" Style="padding-top:0">
                        <MudText Style="min-width: 110px;">Applications:</MudText>
                        <MudText Style="font-weight: bold">@_applicationsText</MudText>
                        @*<MudIconButton Icon="@Icons.Filled.Add" Size="Size.Small" ></MudIconButton>*@
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="2">
                @if (!_configuration.Deleted)
                {
                    <MudTooltip Text="Delete configuration section">
                        <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="() => DeleteConfiguration(true)"></MudIconButton>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="Undo delete">
                        <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="() => DeleteConfiguration(false)"></MudIconButton>
                    </MudTooltip>
                }
                <MudTooltip Text="Undo changes to configuration section">
                    <MudIconButton Icon="@Icons.Filled.Undo" Color="Color.Warning" OnClick="UndoChanges"></MudIconButton>
                </MudTooltip>
            </MudItem>
        </MudGrid>
    </TitleContent>
    <ChildContent>
        @if (!_configuration.Deleted)
        {
            <MudGrid Style="padding: 0; margin: 0; width: 99%" Spacing="2">
                <MudItem xs="12" Class="d-flex align-center" Style="padding:0">
                    <MudItem xs="3" Style="padding-right:8px">
                        <MudSelect T="ConfigEnvironment" Style="background-color: white" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Environments" MultiSelection="true" @bind-SelectedValues="SelectedEnvironments" SelectAll="true">
                            @foreach (var environment in AllEnvironments)
                            {
                                <MudSelectItem T="ConfigEnvironment" Value="environment" Style="white-space: nowrap !important">@environment.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="3">
                        <MudSelect T="Application" Style="background-color: white" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Applications" MultiSelection="true" @bind-SelectedValues="SelectedApplications" SelectAll="true">
                            @foreach (var application in AllApplications)
                            {
                                <MudSelectItem T="Application" Value="application" Style="white-space: nowrap !important">@application.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudItem>
            </MudGrid>
            <MudItem xs="12" Class="d-flex align-center" Style="padding-top:5px">
                <MudButton Variant="Variant.Outlined" Style="background-color: white" OnClick="FormatJson" EndIcon="@Icons.Filled.FormatIndentIncrease">Format JSON</MudButton>
                <MudText Style="padding-left: 10px" Color="Color.Error">@_jsonValidationError</MudText>
            </MudItem>
            <MudTextField @bind-Text="_configuration.Json" T="string" Variant="Variant.Outlined" Lines="@_jsonLines" Style="background-color:#fff"></MudTextField>

            <ConfigurationContentTestPanel @ref="_testPanel" AllEnvironments="_allEnvironments" AllApplications="_allApplications" Configuration="_configuration"></ConfigurationContentTestPanel>
        }
    </ChildContent>
</MudExpansionPanel>

@code {
    private MudExpansionPanel _expansionPanel = null!;
    private ConfigurationContentTestPanel _testPanel = null!;
    private int _jsonLines = 10;
    private string _jsonValidationError = string.Empty;
    private IEnumerable<ConfigEnvironment> _selectedEnvironments = new HashSet<ConfigEnvironment>();
    private IEnumerable<ConfigEnvironment> _selectedEnvironmentsOriginal = new HashSet<ConfigEnvironment>();
    private Configuration _configuration = new();
    private IEnumerable<Application> _selectedApplications = new HashSet<Application>();
    private IEnumerable<Application> _selectedApplicationsOriginal = new HashSet<Application>();
    private string _environmentsText = string.Empty;
    private string _applicationsText = string.Empty;
    private List<Application> _allApplications = new();
    private List<ConfigEnvironment> _allEnvironments = new();
    private int _index = -1;

    [Inject]
    IDialogService DialogService { get; set; } = null!;

    [Parameter]
    public int Index
    {
        get => _index;
        set => _index = _index == -1 ? value : _index;
    }

    [Inject]
    public IApiService ApiService { get; set; } = null!;

    private IEnumerable<ConfigEnvironment> SelectedEnvironments
    {
        get => _selectedEnvironments;
        set
        {
            _selectedEnvironments = value;
            _configuration.Environments = new List<ConfigEnvironment>(value);
            _environmentsText = string.Join(", ", value.OrderBy(x => x.Name));
        }
    }

    private IEnumerable<Application> SelectedApplications
    {
        get => _selectedApplications;
        set
        {
            _selectedApplications = value;
            _configuration.Applications = new List<Application>(value);
            _applicationsText = string.Join(", ", value.OrderBy(x => x.Name));
        }
    }


    [Parameter]
    public List<ConfigEnvironment> AllEnvironments
    {
        get => _allEnvironments;
        set => _allEnvironments = value.OrderBy(x => x.Name).ToList();
    }

    [Parameter]
    public List<Application> AllApplications
    {
        get => _allApplications;
        set => _allApplications = value.OrderBy(x => x.Name).ToList();
    }

    [Parameter]
    public Configuration Configuration
    {
        get => _configuration;
        set
        {
            _configuration = value;
            _environmentsText = string.Join(", ", value.Environments.OrderBy(x => x.Name));
            _applicationsText = string.Join(", ", value.Applications.OrderBy(x => x.Name));
        }
    }

    [Parameter]
    public Func<string, Configuration> GetOriginalFunc { get; set; } = null!;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && _configuration.IsNew)
            _expansionPanel.Expand();
        
        var environments = new List<ConfigEnvironment>();
        foreach (var environment in AllEnvironments)
        {
            if (_configuration.Environments.Any(e => e.Id == environment.Id))
                environments.Add(environment);
        }
        SelectedEnvironments = environments;
        _selectedEnvironmentsOriginal = new List<ConfigEnvironment>(environments);

        var applications = new List<Application>();
        foreach (var application in AllApplications)
        {
            if (_configuration.Applications.Any(s => s.Id == application.Id))
                applications.Add(application);
        }
        SelectedApplications = applications;
        _selectedApplicationsOriginal = new List<Application>(applications);

        base.OnAfterRender(firstRender);
    }

    private void FormatJson()
    {
        try
        {
            _jsonValidationError = string.Empty;
            dynamic parsedJson = JsonConvert.DeserializeObject(_configuration.Json)!;
            if (parsedJson == null) return;
            _configuration.Json = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
            var lines = _configuration.Json.Split('\n').Length;
            _jsonLines = lines < 10 ? 10 : (lines > 30 ? 30 : lines);
        }
        catch (Exception ex)
        {
            _jsonValidationError = ex.Message;
        }
    }

    private void DeleteConfiguration(bool delete)
    {
        _configuration.Deleted = delete;
        _expansionPanel.Collapse();
        StateHasChanged();
    }

    public async Task RunTest()
    {
        await _testPanel.RunTests();
    }

    private void UndoChanges()
    {
        GetOriginalFunc.Invoke(_configuration.Id).CopyTo(_configuration);
        SelectedApplications = new List<Application>(_selectedApplicationsOriginal);
        SelectedEnvironments = new List<ConfigEnvironment>(_selectedEnvironmentsOriginal);
        StateHasChanged();
    }

}