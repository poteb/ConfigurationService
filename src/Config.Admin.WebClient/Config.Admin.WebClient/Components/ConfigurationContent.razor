@using pote.Config.Admin.WebClient.Model
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json
@using pote.Config.Admin.WebClient.Mappers
@using pote.Config.Admin.WebClient.Services
@using pote.Config.Shared
@using System.Collections.ObjectModel
@using pote.Config.Admin.WebClient.Misc
<MudExpansionPanel Style="@($"background-color:{(Configuration.Index % 2 == 0 ? Colors.Indigo.Lighten5 : Colors.Teal.Lighten5)}")" Disabled="@Configuration.Deleted" @ref="_expansionPanel">
    <TitleContent>
        <MudGrid Style="padding: 0; margin: 0; width: 99%">
            <MudItem xs="10" Style="padding-bottom: 0">
                <MudGrid Style="padding: 0; margin: 0; width: 99%">
                    <MudItem xs="12" Class="d-flex" Style="padding-bottom: 0">
                        <MudText Style="min-width: 110px;">Environments:</MudText>
                        <MudText Style="font-weight: bold">@Configuration.EnvironmentsAsText</MudText>
                    </MudItem>
                    <MudItem xs="12" Class="d-flex" Style="padding-top:0">
                        <MudText Style="min-width: 110px;">Applications:</MudText>
                        <MudText Style="font-weight: bold">@Configuration.ApplicationsAsText</MudText>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="2">
                <MudTooltip Text="Duplicate configuration section">
                    <MudIconButton Icon="@Icons.Material.Filled.FileCopy" Color="Color.Warning" OnClick="() => DuplicateConfiguration()"></MudIconButton>
                </MudTooltip>
                @if (!Configuration.Deleted)
                {
                    <MudTooltip Text="Delete configuration section">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteConfiguration(true)"></MudIconButton>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="Undo delete">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteConfiguration(false)"></MudIconButton>
                    </MudTooltip>
                }
                <MudTooltip Text="Undo changes to configuration section">
                    <MudIconButton Icon="@Icons.Material.Filled.Undo" Color="Color.Warning" OnClick="UndoChanges"></MudIconButton>
                </MudTooltip>
            </MudItem>
        </MudGrid>
    </TitleContent>
    <ChildContent>
        @if (!Configuration.Deleted)
        {
            <MudGrid Style="padding: 0; margin: 0; width: 99%" Spacing="2">
                <MudItem xs="12" Class="d-flex align-center" Style="padding:0">
                    <MudItem xs="3" Style="padding-right:8px">
                        <MudSelect T="ConfigEnvironment" Style="background-color: white" Dense="true" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Environments" MultiSelection="true" @bind-SelectedValues="SelectedEnvironments" SelectAll="true" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var environment in AllEnvironments)
                            {
                                <MudSelectItem T="ConfigEnvironment" Value="environment" Style="white-space: nowrap !important">@environment.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="3">
                        <MudSelect T="Application" Style="background-color: white" Dense="true" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Applications" MultiSelection="true" @bind-SelectedValues="SelectedApplications" SelectAll="true" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var application in AllApplications)
                            {
                                <MudSelectItem T="Application" Value="application" Style="white-space: nowrap !important">@application.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudItem>
            </MudGrid>
            <MudItem xs="12" Class="d-flex align-center" Style="padding-top:5px">
                <MudTooltip Text="Format JSON">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.FormatIndentIncrease" Color="Color.Info" OnClick="FormatJson"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="@IsJsonEncryptedCheckboxText()">
                    <MudCheckBox Size="Size.Small" @bind-Checked="@Configuration.IsJsonEncrypted" Disabled="@Configuration.IsJsonEncryptedForced" Color="Color.Info" CheckedIcon="@Icons.Material.Filled.Shield" UncheckedIcon="@Icons.Material.Outlined.Shield"></MudCheckBox>
                </MudTooltip>
                <MudText Style="padding-left: 10px" Color="Color.Error">@_jsonValidationError</MudText>
            </MudItem>
            <MudTextField @bind-Text="Configuration.Json" T="string" Variant="Variant.Outlined" Lines="@_jsonLines" Style="background-color:#fff"></MudTextField>

            <ConfigurationContentTestPanel @ref="_testPanel" AllEnvironments="_allEnvironments" AllApplications="_allApplications" Configuration="Configuration"></ConfigurationContentTestPanel>
            
            <ConfigurationContentHistory AllEnvironments="_allEnvironments" AllApplications="_allApplications" Configuration="Configuration"></ConfigurationContentHistory>
        }
    </ChildContent>
</MudExpansionPanel>

@code {
    private MudExpansionPanel _expansionPanel = null!;
    private ConfigurationContentTestPanel _testPanel = null!;
    private int _jsonLines = 10;
    private string _jsonValidationError = string.Empty;
    private List<Application> _allApplications = new();
    private List<ConfigEnvironment> _allEnvironments = new();
    private Configuration _originalConfiguration = new();

    [Inject] IDialogService DialogService { get; set; } = null!;
    [Inject] IApiService ApiService { get; set; } = null!;
    [Parameter] public IConfigurationActions ConfigurationActions { get; set; } = null!;

    private IEnumerable<ConfigEnvironment> SelectedEnvironments
    {
        get => Configuration.Environments;
        set
        {
            Configuration.Environments.Clear();
            Configuration.Environments.AddRange(value);
        }
    }

    private IEnumerable<Application> SelectedApplications
    {
        get => Configuration.Applications;
        set
        {
            Configuration.Applications.Clear();
            Configuration.Applications.AddRange(value);
        }
    }

#pragma warning disable BL0007
    [Parameter]
    public List<ConfigEnvironment> AllEnvironments
    {
        get => _allEnvironments;
        set => _allEnvironments = value.OrderBy(x => x.Name).ToList();
    }

    [Parameter]
    public List<Application> AllApplications
    {
        get => _allApplications;
        set => _allApplications = value.OrderBy(x => x.Name).ToList();
    }
#pragma warning restore BL0007

    [Parameter]
    public Configuration Configuration { get; set; } = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && Configuration.IsNew)
            _expansionPanel.Expand();

        if (firstRender)
            Configuration.CopyTo(_originalConfiguration);

        base.OnAfterRender(firstRender);
    }

    private void FormatJson()
    {
        try
        {
            _jsonValidationError = string.Empty;
            dynamic parsedJson = JsonConvert.DeserializeObject(Configuration.Json)!;
            if (parsedJson == null) return;
            Configuration.Json = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
            var lines = Configuration.Json.Split('\n').Length;
            _jsonLines = lines < 10 ? 10 : (lines > 30 ? 30 : lines);
        }
        catch (Exception ex)
        {
            _jsonValidationError = ex.Message;
        }
    }

    private void DeleteConfiguration(bool delete)
    {
        Configuration.Deleted = delete;
        _expansionPanel.Collapse();
        StateHasChanged();
    }

    public async Task RunTest()
    {
        await _testPanel.RunTests();
    }

    private void UndoChanges()
    {
        _originalConfiguration.CopyTo(Configuration);
        StateHasChanged();
    }

    private void DuplicateConfiguration()
    {
        ConfigurationActions.DuplicateConfiguration(Configuration);
    }
    
    private string IsJsonEncryptedCheckboxText()
    {
        return Configuration.IsJsonEncrypted ? "Encrypt (ON)" : "Encrypt (OFF)";
    }
}