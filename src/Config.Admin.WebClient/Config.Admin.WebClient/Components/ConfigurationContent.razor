@using pote.Config.Admin.WebClient.Model
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json
@using pote.Config.Admin.WebClient.Mappers
@using pote.Config.Admin.WebClient.Services
@using pote.Config.Shared
<MudExpansionPanel>
    <TitleContent>
        <MudGrid Style="padding: 0; margin: 0; width: 99%">
            <MudItem xs="12" Class="d-flex" Style="padding-bottom: 0">
                <MudText Style="min-width: 110px;">Environments:</MudText>
                <MudText>@_environmentsText</MudText>
                @*<MudIconButton Icon="@Icons.Filled.Add" OnClick="ToggleEnvironmentsPopup" Size="Size.Small" ></MudIconButton>
                    <MudPopover Open="@_environmentPopupOpen" Fixed="true" Class="px-4 pt-4">
                    <MudSelect T="ConfigEnvironment" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Environments" MultiSelection="true" @bind-SelectedValues="SelectedEnvironments" SelectAll="true">
                    @foreach (var environment in AllEnvironments)
                    {
                    <MudSelectItem T="ConfigEnvironment" Value="environment" Style="white-space: nowrap !important">@environment.Name</MudSelectItem>
                    }
                    </MudSelect>
                    </MudPopover>*@
            </MudItem>
            <MudItem xs="12" Class="d-flex" Style="padding-top:0">
                <MudText Style="min-width: 110px;">Systems:</MudText>
                <MudText>@string.Join(", ", Configuration.Systems)</MudText>
                @*<MudIconButton Icon="@Icons.Filled.Add" Size="Size.Small" ></MudIconButton>*@
            </MudItem>
        </MudGrid>
    </TitleContent>
    <ChildContent>
        <MudGrid Style="padding: 0; margin: 0; width: 99%" Spacing="2">
            <MudItem xs="12" Class="d-flex align-center" Style="padding:0">
                <MudItem xs="3" Style="padding-right:8px">
                    <MudSelect T="ConfigEnvironment" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Environments" MultiSelection="true" @bind-SelectedValues="SelectedEnvironments" SelectAll="true">
                        @foreach (var environment in AllEnvironments)
                        {
                            <MudSelectItem T="ConfigEnvironment" Value="environment" Style="white-space: nowrap !important">@environment.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
                    <MudSelect T="ConfigSystem" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Systems" MultiSelection="true" @bind-SelectedValues="SelectedSystems" SelectAll="true">
                        @foreach (var system in AllSystems)
                        {
                            <MudSelectItem T="ConfigSystem" Value="system" Style="white-space: nowrap !important">@system.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudItem>
        </MudGrid>
        <MudItem xs="12" Class="d-flex align-center" Style="padding-top:5px">
            <MudButton Variant="Variant.Filled" OnClick="FormatJson" EndIcon="@Icons.Filled.FormatIndentIncrease">Format JSON</MudButton>
            <MudText Style="padding-left: 10px" Color="Color.Error">@_jsonValidationError</MudText>
        </MudItem>
        <MudTextField @bind-Text="Configuration.Json" T="string" Variant="Variant.Outlined" Lines="@_jsonLines"></MudTextField>
        <MudExpansionPanels>
            <MudExpansionPanel HideIcon="true">
                <TitleContent>
                    <MudText>Test</MudText>
                </TitleContent>
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled" OnClick="RunTests">Run tests</MudButton>
                        </MudItem>
                        <MudItem xs="12" Style="border-left: 10px solid #008b8b; padding-left: 30px">
                            @foreach (var result in _testResults)
                            {
                                <MudItem xs="12" Style="margin-bottom:20px">
                                    <MudGrid Style="padding: 0;margin:0">
                                        <MudItem xs="12" Style="padding: 0">
                                            System: @_allSystems.FirstOrDefault(x => x.Id == result.System)?.Name
                                        </MudItem>
                                        <MudItem xs="12" Style="padding: 0">
                                            Environment: @_allEnvironments.FirstOrDefault(x => x.Id == result.Environment)?.Name
                                        </MudItem>
                                        <MudItem xs="12" Style="padding: 0">
                                            @foreach (var problem in result.Problems)
                                            {
                                                <MudItem Style="color: red">• @problem</MudItem>
                                            }
                                        </MudItem>
                                        <MudItem xs="12" Style="padding: 0">
                                            <MudTextField ReadOnly="true" T="string" Text="@FormatJson(result.GetJson())" Variant="Variant.Outlined" Lines="10" Style="width: calc(100% - 25px)"></MudTextField>
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>
                            }
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </ChildContent>
</MudExpansionPanel>

@code {
    private int _jsonLines = 10;
    private string _jsonValidationError = string.Empty;
    private IEnumerable<ConfigEnvironment> _selectedEnvironments = new HashSet<ConfigEnvironment>();
    private Configuration _configuration = new();
    private Configuration _configurationOriginal = new();
    private IEnumerable<ConfigSystem> _selectedSystems = new HashSet<ConfigSystem>();
    private string _environmentsText = string.Empty;
    private string _systemsText = string.Empty;
    private List<ConfigSystem> _allSystems = new();
    private List<ConfigEnvironment> _allEnvironments = new();
    [Parameter] public IApiService ApiService { get; set; } = null!;
    private List<ParseResponse> _testResults = new();
    //public bool _environmentPopupOpen;

    private IEnumerable<ConfigEnvironment> SelectedEnvironments
    {
        get => _selectedEnvironments;
        set
        {
            _selectedEnvironments = value;
            _configuration.Environments = new List<ConfigEnvironment>(value);
            _environmentsText = string.Join(", ", value.OrderBy(x => x.Name));
        }
    }

    private IEnumerable<ConfigSystem> SelectedSystems
    {
        get => _selectedSystems;
        set
        {
            _selectedSystems = value;
            _configuration.Systems = new List<ConfigSystem>(value);
            _systemsText = string.Join(", ", value.OrderBy(x => x.Name));
        }
    }


    [Parameter]
    public List<ConfigEnvironment> AllEnvironments
    {
        get => _allEnvironments;
        set => _allEnvironments = value.OrderBy(x => x.Name).ToList();
    }

    [Parameter]
    public List<ConfigSystem> AllSystems
    {
        get => _allSystems;
        set => _allSystems = value.OrderBy(x => x.Name).ToList();
    }

    [Parameter]
    public Configuration Configuration
    {
        get => _configuration;
        set
        {
            _configuration = value;
            _configurationOriginal = ConfigurationMapper.Copy(value);
            _environmentsText = string.Join(", ", value.Environments);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var envs = new List<ConfigEnvironment>();
        foreach (var environment in AllEnvironments)
        {
            if (Configuration.Environments.Any(e => e.Id == environment.Id))
                envs.Add(environment);
        }
        SelectedEnvironments = envs;

        var systs = new List<ConfigSystem>();
        foreach (var system in AllSystems)
        {
            if (Configuration.Systems.Any(s => s.Id == system.Id))
                systs.Add(system);
        }
        SelectedSystems = systs;

        base.OnAfterRender(firstRender);
    }

    private string FormatJson(string json)
    {
        try
        {
            dynamic parsedJson = JsonConvert.DeserializeObject(json)!;
            if (parsedJson == null) return "Unable to parse json";
            return JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    private void FormatJson()
    {
        try
        {
            _jsonValidationError = string.Empty;
            dynamic parsedJson = JsonConvert.DeserializeObject(Configuration.Json)!;
            if (parsedJson == null) return;
            Configuration.Json = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
            var lines = Configuration.Json.Split('\n').Length;
            _jsonLines = lines < 10 ? 10 : (lines > 30 ? 30 : lines);
        }
        catch (Exception ex)
        {
            _jsonValidationError = ex.Message;
        }
    }

    private async Task TestConfiguration()
    {
        //var tasks = new List<Task>();
        //foreach (var system in _testConfigurationSelectedSystems)
        //{
        //    foreach (var environment in _testConfigurationSelectedEnvironments)
        //    {
        //        var r = await ApiService.TestConfiguration(Configuration.Json, system, environment);
        //    }
        //}
    }

    private void EnvironmentsChanged(IEnumerable<ConfigEnvironment> obj)
    {

    }

    //private void ToggleEnvironmentsPopup()
    //{
    //    _environmentPopupOpen = !_environmentPopupOpen;
    //    Console.WriteLine(_environmentPopupOpen);
    //}
    private async Task RunTests()
    {
        _testResults.Clear();
        foreach (var system in Configuration.Systems)
        {
            foreach (var environment in Configuration.Environments)
            {
                var response = await ApiService.TestConfiguration(Configuration.Json, system, environment);
                if (!response.IsSuccess || response.Response == null)
                {
                    _testResults.Add(new ParseResponse
                        {
                            Problems = new List<string> { "Call to API failed" }
                        });
                    continue;
                }
                _testResults.Add(response.Response);
            }
        }
    }

}